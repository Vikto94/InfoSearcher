/**
 * 
 */
package indexer;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Objects;
import java.util.Scanner;

import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.StopAnalyzer;
import org.apache.lucene.analysis.en.EnglishAnalyzer;
import org.apache.lucene.analysis.ru.RussianAnalyzer;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.IndexWriterConfig;
import org.apache.lucene.store.FSDirectory;
import org.apache.lucene.util.Version;
import org.sqlite.JDBC;
import org.sqlite.SQLite;

import searcher.TokenSearcher;

/**
 * @author Viktor
 *
 */


public class Index {
	private final long index;
	private final String path;
	private final File folder;
	private static final Integer maxPathLen = new Integer(200);
	private static final Analyzer[] analyzers = new Analyzer[]{  
        new EnglishAnalyzer(Version.LUCENE_31),  
        new RussianAnalyzer(Version.LUCENE_31),  
        new StopAnalyzer(Version.LUCENE_31),  
        new StandardAnalyzer(Version.LUCENE_31)  
    };  
	
	public Index (long index){
		this.index = index;
		path = indexToPath (index);
		folder = new File (path);
	}
	
	public Index (String path){
		this.path = path.concat("\\index");
		folder = new File (path);
		buildIndex(path);
		index = pathToIndex (this.path);
	}	
	
	public long getIndex (){
		return index;
	}
	
	public String getPath (){
		return path;
	}
	
	public void buildIndex (String path){
		String[] fileList = folder.list();
		for (String fileName : fileList){
			try {
				Scanner in = new Scanner(new File(fileName));
				String word = "";
				while (in.hasNext()) {
					word = in.next();

					morphemeInFile.add(word);
				}
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		try {
			FSDirectory FSD =  FSDirectory.open(new File(this.path));
            RussianAnalyzer analyzer = new  RussianAnalyzer(Version.LUCENE_31);  //какой используем анализатор  
            IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_31,analyzer); //наш конфиг   
            iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE); //содаем всегда новый индекс  
            IndexWriter writer = new IndexWriter(FSD, iwc); //создаем объект IndexWriter - или по другому индекс  
            Document doc = new Document(); //создаем документ  
            doc.add(new Field("id","1",Field.Store.YES,Field.Index.NOT_ANALYZED)); //добавляем 1-е поле в документ  
            doc.add(new Field("name","Быстрая, рыжая лиса препрыгнула через ленивых собак и бысто убежала"  
            ,Field.Store.YES,Field.Index.ANALYZED)); //добавляем 2-е поле в документ  
            writer.addDocument(doc); //добавляем документ в индекс  
            Document doc1 = new Document(); //повторяем тежe действия  
            doc1.add(new Field("id","2",Field.Store.YES,Field.Index.NOT_ANALYZED));  
            doc1.add(new Field("name","Рыжий лис",Field.Store.YES,Field.Index.ANALYZED));  
            doc1.setBoost(10.0f);  
            writer.addDocument(doc1);  
            Document doc2 = new Document();  
            doc2.add(new Field("id","3",Field.Store.YES,Field.Index.NOT_ANALYZED));  
            doc2.add(new Field("name","Быстрая, рыжая лиса препрыгнула через ленивых собак и бысто убежала"  
            ,Field.Store.YES,Field.Index.ANALYZED));  
            writer.addDocument(doc2);  
            Document doc3 = new Document();  
            doc3.add(new Field("id","3",Field.Store.YES,Field.Index.NOT_ANALYZED));  
            doc3.add(new Field("name","Рыжий лис",Field.Store.YES,Field.Index.NOT_ANALYZED));  
            writer.addDocument(doc3);  
            writer.optimize(); //оптимизируем индекс  
            writer.close();  //все закрываем  
            FSD.close();  		 	
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public static long pathToIndex (String path){
		long index = 0;
		try {
			Class.forName("org.sqlite.JDBC");
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return -1;
		}
		try {
			Connection bd = DriverManager.getConnection("jdbc:sqlite:sqlite.db_ip");
			Statement st = bd.createStatement();
			String query = "create table if not exists pathIndexes "
					.concat("(id INTEGER PRIMARY KEY AUTOINCREMENT, path VARCHAR(")
					.concat(Objects.toString(maxPathLen))
					.concat("));");
			st.executeUpdate (query);
			query = "select id from pathIndexes where path LIKE '"
					.concat(path)
					.concat("'");
			ResultSet rs = st.executeQuery(query);
			if (rs.next()){
				index = rs.getLong(1);
			}
			else
			{
				query = "insert into pathIndexes (path) values ( '"
						.concat(path)
						.concat("');");
				st.executeUpdate (query);
				query = "select id from pathIndexes where path LIKE '"
						.concat(path)
						.concat("';");
				ResultSet rs1 = st.executeQuery(query);
				if (rs1.next()){
					index = rs1.getLong("id");
				}
				index = -1;
			}
			st.close();
			bd.close();
			return index;

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return -1;
		}
	}
	
	public static String indexToPath (long index){
		String path = "";
		try {
			Class.forName("org.sqlite.JDBC");
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
		try {
			Connection bd = DriverManager.getConnection("jdbc:sqlite:sqlite.db_ip");
			Statement st = bd.createStatement();
			String query = "select path from pathIndexes where id LIKE '"
					.concat(Objects.toString(new Long (index)))
					.concat("';");
			ResultSet rs = st.executeQuery(query);
			if (rs.next()){
				path = rs.getString(1);
			}
			else path = null;
			st.close();
			bd.close();
			return path;

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
	}	
	
	
}
